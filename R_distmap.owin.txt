> distmap.owin
function (X, ..., discretise = FALSE, invert = FALSE) 
{
    verifyclass(X, "owin")
    uni <- unitname(X)
    if (X$type == "rectangle") {
        M <- as.mask(X, ...)
        Bdry <- im(bdist.pixels(M, style = "matrix"), M$xcol, 
            M$yrow, unitname = uni)
        if (!invert) 
            Dist <- as.im(M, value = 0)
        else Dist <- Bdry
    }
    else if (X$type == "polygonal" && !discretise) {
        Edges <- edges(X)
        Dist <- distmap(Edges, ...)
        Bdry <- attr(Dist, "bdry")
        if (!invert) 
            Dist[X] <- 0
        else {
            bb <- as.rectangle(X)
            bigbox <- grow.rectangle(bb, diameter(bb)/4)
            Dist[complement.owin(X, bigbox)] <- 0
        }
    }
    else {
        X <- as.mask(X, ...)
        if (invert) 
            X <- complement.owin(X)
        xc <- X$xcol
        yr <- X$yrow
        nr <- X$dim[1L]
        nc <- X$dim[2L]
        mat <- X$m
        pad <- invert
        mat <- cbind(pad, mat, pad)
        mat <- rbind(pad, mat, pad)
        res <- .C("distmapbin", xmin = as.double(X$xrange[1L]), 
            ymin = as.double(X$yrange[1L]), xmax = as.double(X$xrange[2L]), 
            ymax = as.double(X$yrange[2L]), nr = as.integer(nr), 
            nc = as.integer(nc), inp = as.integer(as.logical(t(mat))), 
            distances = as.double(matrix(0, ncol = nc + 2, nrow = nr + 
                2)), boundary = as.double(matrix(0, ncol = nc + 
                2, nrow = nr + 2)), PACKAGE = "spatstat")
        dist <- matrix(res$distances, ncol = nc + 2, byrow = TRUE)[2:(nr + 
            1), 2:(nc + 1)]
        bdist <- matrix(res$boundary, ncol = nc + 2, byrow = TRUE)[2:(nr + 
            1), 2:(nc + 1)]
        Dist <- im(dist, xc, yr, unitname = uni)
        Bdry <- im(bdist, xc, yr, unitname = uni)
    }
    attr(Dist, "bdry") <- Bdry
    return(Dist)
}
<bytecode: 0x000002128f67bd38>
<environment: namespace:spatstat>